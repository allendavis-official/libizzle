name: üéµ Scrape Audiomack Data

on:
  schedule:
    # Run daily at 2 AM UTC (9 PM EST / 6 PM PST)
    - cron: "0 2 * * *"

  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pandas playwright

      - name: üé≠ Install Playwright browsers
        run: |
          playwright install --with-deps

      - name: üìÅ Create data directory
        run: |
          mkdir -p data
          echo "‚úÖ Data directory ready"

      - name: üéµ Run Audiomack scraper
        run: |
          echo "Starting scraper at $(date)"
          python audiomack_scraper_v5.py
          echo "Scraper completed at $(date)"

      - name: üìã Move and update CSV files
        run: |
          echo "=" * 60
          echo "üìã Processing CSV files..."
          echo "=" * 60

          # First, move any CSV files from root to data/ (in case scraper saved to root)
          if ls audiomack_*.csv 1> /dev/null 2>&1; then
            echo "Found CSV files in root directory, moving to data/"
            mv audiomack_*.csv data/ 2>/dev/null || true
          fi

          # Now find the most recent files in data/
          echo ""
          echo "Looking for latest CSV files in data/ directory..."

          # Find latest artist file (excluding "latest")
          LATEST_ARTIST=$(ls -t data/audiomack_artists_*.csv 2>/dev/null | grep -v latest | head -1)

          # Find latest tracks file (excluding "latest")
          LATEST_TRACK=$(ls -t data/audiomack_tracks_*.csv 2>/dev/null | grep -v latest | head -1)

          # Update artist latest file
          if [ -n "$LATEST_ARTIST" ]; then
            cp "$LATEST_ARTIST" data/audiomack_artists_latest.csv
            echo "‚úÖ Updated audiomack_artists_latest.csv"
            echo "   Source: $(basename $LATEST_ARTIST)"
            echo "   Size: $(wc -c < $LATEST_ARTIST) bytes"
            echo "   Lines: $(wc -l < $LATEST_ARTIST)"
          else
            echo "‚ö†Ô∏è  No artist CSV files found in data/"
          fi

          echo ""

          # Update tracks latest file
          if [ -n "$LATEST_TRACK" ]; then
            cp "$LATEST_TRACK" data/audiomack_tracks_latest.csv
            echo "‚úÖ Updated audiomack_tracks_latest.csv"
            echo "   Source: $(basename $LATEST_TRACK)"
            echo "   Size: $(wc -c < $LATEST_TRACK) bytes"
            echo "   Lines: $(wc -l < $LATEST_TRACK)"
          else
            echo "‚ö†Ô∏è  No track CSV files found in data/"
          fi

          echo ""
          echo "üìä Current files in data/:"
          ls -lh data/*.csv 2>/dev/null || echo "No CSV files found"

          # Optional: Keep only last 30 days of timestamped files
          echo ""
          echo "üßπ Cleaning up old files (>30 days)..."
          find data -name "audiomack_*.csv" -type f -mtime +30 ! -name "*latest*" -delete 2>/dev/null || true

          echo ""
          echo "=" * 60

      - name: üìä Check if data changed
        id: check_changes
        run: |
          echo "Checking for changes in data/ directory..."

          if [[ -n $(git status --porcelain data/) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo ""
            echo "‚úÖ Changes detected:"
            git status --short data/
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo ""
            echo "‚ÑπÔ∏è  No changes in data/"
            echo "This might mean:"
            echo "  - Artist stats haven't changed since last run"
            echo "  - Scraper didn't produce new files"
            echo "  - CSV files are identical to previous version"
          fi

      - name: üíæ Commit and push if changed
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name 'Liberian Pulse Bot'
          git config --global user.email 'bot@liberianpulse.com'

          # Add all CSV files in data/
          git add data/*.csv

          # Show what's being committed
          echo ""
          echo "üìù Files to commit:"
          git status --short data/

          echo ""
          echo "üìä Changes summary:"
          git diff --stat --staged data/

          git commit -m "ü§ñ Auto-update data: $(date +'%Y-%m-%d %H:%M UTC')"
          git push -u origin main

          echo ""
          echo "‚úÖ Changes pushed to GitHub!"

      - name: ‚úÖ Summary
        run: |
          echo ""
          echo "=" * 60
          echo "üìä Workflow Summary"
          echo "=" * 60

          if [[ "${{ steps.check_changes.outputs.changes }}" == "true" ]]; then
            echo "‚úÖ SUCCESS: Data updated and pushed to repository"
            echo ""
            echo "Next steps:"
            echo "  - Vercel will auto-deploy in 2-3 minutes"
            echo "  - Check your website for updated data"
          else
            echo "‚ÑπÔ∏è  INFO: No updates needed"
            echo ""
            echo "Possible reasons:"
            echo "  - Artist/track stats unchanged since last scrape"
            echo "  - All data is up to date"
            echo ""
            echo "This is NORMAL if artists' metrics haven't changed!"
          fi

          echo "=" * 60
          echo ""
          echo "üïê Completed at: $(date)"
          echo ""

      # Optional: Send notification on failure
      - name: üìß Notify on failure
        if: failure()
        run: |
          echo ""
          echo "=" * 60
          echo "‚ùå WORKFLOW FAILED"
          echo "=" * 60
          echo ""
          echo "Check logs at:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "Common issues:"
          echo "  - Scraper crashed (check Python errors)"
          echo "  - Network timeout"
          echo "  - Audiomack website changed structure"
          echo "  - Permission issues"
          echo ""
